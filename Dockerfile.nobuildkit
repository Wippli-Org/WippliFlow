FROM node:20.19-bullseye-slim AS base

# Install system dependencies without BuildKit cache mounts
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        openssh-client \
        python3 \
        g++ \
        build-essential \
        git \
        poppler-utils \
        poppler-data \
        procps && \
    yarn config set python /usr/bin/python3 && \
    npm install -g node-gyp && \
    rm -rf /var/lib/apt/lists/*

RUN npm i -g npm@9.9.3 pnpm@9.15.0 pm2@6.0.10 typescript@4.9.4

# Set the locale
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
ENV NX_DAEMON=false

RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    locales \
    locales-all \
    libcap-dev \
 && rm -rf /var/lib/apt/lists/*

# install isolated-vm in a parent directory to avoid linking the package in every sandbox
RUN cd /usr/src && npm i isolated-vm@5.0.1

RUN pnpm store add @tsconfig/node18@1.0.0
RUN pnpm store add @types/node@18.17.1
RUN pnpm store add typescript@4.9.4

### STAGE 1: Build ###
FROM base AS build

# Set up backend
WORKDIR /usr/src/app

COPY .npmrc package.json package-lock.json ./
RUN npm ci

COPY . .

RUN npm run nx build server -- --skip-nx-cache

### STAGE 2: Frontend Build ###
FROM base AS ui-build

WORKDIR /usr/src/app
COPY .npmrc package.json package-lock.json ./
RUN npm ci
COPY . .
RUN npm run nx build ui-platform -- --skip-nx-cache

### STAGE 3: Production ###
FROM node:20.19-bullseye-slim AS production

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        ca-certificates \
        poppler-utils \
        poppler-data \
        procps \
    && rm -rf /var/lib/apt/lists/*

RUN npm i -g pnpm@9.15.0 pm2@6.0.10

# install isolated-vm in production
RUN cd /usr/src && npm i isolated-vm@5.0.1

WORKDIR /usr/src/app
COPY --from=build /usr/src/app/package*.json ./
COPY --from=build /usr/src/app/dist ./dist
COPY --from=ui-build /usr/src/app/dist/packages/ui/platform ./dist/packages/ui/platform

RUN npm ci --omit=dev --ignore-scripts

# Set environment
ENV NODE_ENV=production
ENV AP_EXECUTION_MODE=UNSANDBOXED
ENV AP_ENGINE_EXECUTABLE_PATH=dist/packages/engine/main.js

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:80/api/v1/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"

EXPOSE 80
CMD ["pm2-runtime", "dist/packages/server/api/src/main.js"]
